import pytest
from tests.integration_common import *


@pytest.mark.parametrize("tx_input, expected_output",
                         [
                             pytest.param([("deposit", 1, 1, 1.0)],
                                          [[1, 1.0, 0.0, 1.0, "false"]],
                                          marks=[pytest.mark.deposit, pytest.mark.basic],
                                          id="deposit_basic"),
                             pytest.param([("deposit", 1, 1, 0.0)],
                                          [[1, 0.0, 0.0, 0.0, "false"]],
                                          marks=pytest.mark.deposit,
                                          id="deposit_0.0"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("deposit", 1, 2, 0.1),
                                           ("deposit", 1, 3, 1000)],
                                          [[1, 1001.1, 0.0, 1001.1, "false"]],
                                          marks=pytest.mark.deposit,
                                          id="multiple_deposit"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("deposit", 1, 1, 0.1)],
                                          [[1, 1.0, 0.0, 1.0, "false"]],
                                          marks=pytest.mark.deposit,
                                          id="duplicate_deposit"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("withdrawal", 1, 2, 0.1)],
                                          [[1, 0.9, 0.0, 0.9, "false"]],
                                          marks=[pytest.mark.withdrawal, pytest.mark.basic],
                                          id="withdraw_basic"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("withdrawal", 1, 2, 0.1),
                                           ("withdrawal", 1, 2, 0.1)],
                                          [[1, 0.9, 0.0, 0.9, "false"]],
                                          marks=pytest.mark.withdrawal,
                                          id="duplicate_withdrawal"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("withdrawal", 1, 2, 1.0)],
                                          [[1, 0.0, 0.0, 0.0, "false"]],
                                          marks=pytest.mark.withdrawal,
                                          id="withdrawal_all_funds"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("withdrawal", 1, 2, 1.1)],
                                          [[1, 1.0, 0.0, 1.0, "false"]],
                                          marks=[pytest.mark.withdrawal, pytest.mark.ignored],
                                          id="withdraw_more_than_avail"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("deposit", 1, 2, 1.1),
                                           ("dispute", 1, 1)],
                                          [[1, 1.1, 1.0, 2.1, "false"]],
                                          marks=[pytest.mark.dispute, pytest.mark.basic],
                                          id="dispute_basic"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("withdrawal", 1, 2, 0.5),
                                           ("dispute", 1, 2)],
                                          [[1, 0.5, 0.0, 0.5, "false"]],
                                          marks=[pytest.mark.dispute, pytest.mark.ignored],
                                          id="dispute_on_withdrawal"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("withdrawal", 1, 2, 0.5),
                                           ("dispute", 1, 1)],
                                          [[1, -0.5, 1.0, 0.5, "false"]],
                                          marks=pytest.mark.dispute,
                                          id="dispute_after_half_withdrawn"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("dispute", 1, 1),
                                           ("dispute", 1, 1)],
                                          [[1, 0.0, 1.0, 1.0, "false"]],
                                          marks=[pytest.mark.dispute, pytest.mark.duplicate],
                                          id="dispute_duplicate"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("dispute", 1, 1),
                                           ("deposit", 2, 2, 10.0),
                                           ("dispute", 2, 2)],
                                          [[1, 0.0, 1.0, 1.0, "false"],
                                           [2, 0.0, 10.0, 10.0, "false"]],
                                          marks=[pytest.mark.dispute],
                                          id="dispute_multiple"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("dispute", 1, 1),
                                           ("withdrawal", 1, 2, 0.1)],
                                          [[1, 0.0, 1.0, 1.0, "false"]],
                                          marks=[pytest.mark.dispute, pytest.mark.withdrawal],
                                          id="withdraw_disputed"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("dispute", 1, 1),
                                           ("resolve", 1, 1)],
                                          [[1, 1.0, 0.0, 1.0, "false"]],
                                          marks=[pytest.mark.dispute, pytest.mark.resolve, pytest.mark.basic],
                                          id="resolve_basic"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("dispute", 1, 1),
                                           ("chargeback", 1, 1),
                                           ("resolve", 1, 1)],
                                          [[1, 0.0, 0.0, 0.0, "true"]],
                                          marks=[pytest.mark.dispute, pytest.mark.resolve, pytest.mark.ignored],
                                          id="resolve_after_chargeback"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("dispute", 1, 1),
                                           ("chargeback", 1, 1)],
                                          [[1, 0.0, 0.0, 0.0, "true"]],
                                          marks=[pytest.mark.chargeback, pytest.mark.basic],
                                          id="chargeback_basic"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("chargeback", 1, 1)],
                                          [[1, 1.0, 0.0, 1.0, "false"]],
                                          marks=[pytest.mark.chargeback, pytest.mark.ignored],
                                          id="chargeback_no_dispute"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("dispute", 1, 1),
                                           ("resolve", 1, 1),
                                           ("chargeback", 1, 1)],
                                          [[1, 1.0, 0.0, 1.0, "false"]],
                                          marks=[pytest.mark.chargeback, pytest.mark.ignored],
                                          id="chargeback_resolved"),
                             pytest.param([("deposit", 1, 1, 1.0),
                                           ("withdrawal", 1, 2, 0.5),
                                           ("chargeback", 1, 2)],
                                          [[1, 0.5, 0.0, 0.5, "false"]],
                                          marks=[pytest.mark.chargeback, pytest.mark.ignored],
                                          id="chargeback_on_withdrawal"),
                         ])
def test_basic_tx_processing(tx_input, expected_output):
    """
    Assumption: Transaction ID should be unique, duplicate tx ids should be ignored and discarded
    Assumption: Is event occurs to withdraw more than available, tx is discarded
    Assumption: Dispute on withdrawal is ignored as well as other types except deposit.
    """
    assert_dataframes_match(process_all_tx(tx_input), expected_df(expected_output))


@pytest.mark.parametrize("tx_input",
                         [
                             pytest.param([("withdrawal", 1, 1, 1.0)],
                                          marks=[pytest.mark.withdrawal, pytest.mark.ignored],
                                          id="withdrawal_no_account"),
                             pytest.param([("dispute", 1, 2)],
                                          marks=[pytest.mark.dispute, pytest.mark.ignored],
                                          id="dispute_no_tx"),
                             pytest.param([("resolve", 1, 1)],
                                          marks=[pytest.mark.resolve, pytest.mark.ignored],
                                          id="resolve_no_tx"),
                             pytest.param([("chargeback", 1, 1)],
                                          marks=[pytest.mark.chargeback, pytest.mark.ignored],
                                          id="chargeback_no_tx"),
                         ])
def test_no_tx(tx_input):
    assert process_all_tx(tx_input).empty


INPUT_FOR_DISCARDED_TX_LARGE_WITHDRAWAL = [("deposit", 1, 1, 100.0),
                                           ("withdrawal", 1, 2, 101.0)]


@pytest.mark.parametrize("tx_input, expected_output",
                         [
                             pytest.param([("dispute", 1, 2)],
                                          [[1, 100.0, 0.0, 100.0, "false"]],
                                          marks=[pytest.mark.discarded, pytest.mark.dispute],
                                          id="dispute_on_discarded"),
                             pytest.param([("resolve", 1, 2)],
                                          [[1, 100.0, 0.0, 100.0, "false"]],
                                          marks=[pytest.mark.discarded, pytest.mark.resolve],
                                          id="resolve_on_discarded"),
                             pytest.param([("chargeback", 1, 2)],
                                          [[1, 100.0, 0.0, 100.0, "false"]],
                                          marks=[pytest.mark.discarded, pytest.mark.chargeback],
                                          id="dispute_on_chargeback"),
                         ])
def test_on_discarded_tx(tx_input, expected_output):
    input_too_large_withdrawal = [("deposit", 1, 1, 100.0),
                                  ("withdrawal", 1, 2, 101.0)]
    assert_dataframes_match(process_all_tx(input_too_large_withdrawal + tx_input),
                            expected_df(expected_output))


@pytest.mark.parametrize("tx_input, expected_output",
                         [
                             pytest.param([("deposit", 1, 2, 10.0)],
                                          [[1, 0.0, 0.0, 0.0, "true"]],
                                          marks=[pytest.mark.on_locked, pytest.mark.deposit],
                                          id="deposit_on_locked"),
                             pytest.param([("withdrawal", 1, 2, 10.0)],
                                          [[1, 0.0, 0.0, 0.0, "true"]],
                                          marks=[pytest.mark.on_locked, pytest.mark.withdrawal],
                                          id="withdrawal_on_locked"),
                             pytest.param([("dispute", 1, 1)],
                                          [[1, 0.0, 0.0, 0.0, "true"]],
                                          marks=[pytest.mark.on_locked, pytest.mark.dispute],
                                          id="dispute_on_locked"),
                             pytest.param([("resolve", 1, 1)],
                                          [[1, 0.0, 0.0, 0.0, "true"]],
                                          marks=[pytest.mark.on_locked, pytest.mark.resolve],
                                          id="resolve_on_locked"),
                             pytest.param([("chargeback", 1, 1)],
                                          [[1, 0.0, 0.0, 0.0, "true"]],
                                          marks=[pytest.mark.on_locked, pytest.mark.chargeback],
                                          id="chargeback_on_locked"),
                         ])
def test_on_locked_acc(tx_input, expected_output):
    input_locked_acc = [("deposit", 1, 1, 100.0),
                        ("dispute", 1, 1),
                        ("chargeback", 1, 1)]
    assert_dataframes_match(process_all_tx(input_locked_acc + tx_input),
                            expected_df(expected_output))
